{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "367f7b32",
   "metadata": {
    "papermill": {
     "duration": 0.006806,
     "end_time": "2024-06-19T11:27:13.913813",
     "exception": false,
     "start_time": "2024-06-19T11:27:13.907007",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Import Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "207c06be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T11:27:13.929377Z",
     "iopub.status.busy": "2024-06-19T11:27:13.928534Z",
     "iopub.status.idle": "2024-06-19T11:27:30.793642Z",
     "shell.execute_reply": "2024-06-19T11:27:30.792366Z"
    },
    "papermill": {
     "duration": 16.876296,
     "end_time": "2024-06-19T11:27:30.796858",
     "exception": false,
     "start_time": "2024-06-19T11:27:13.920562",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: tensorflow==2.15.0 in /opt/conda/lib/python3.10/site-packages (2.15.0)\r\n",
      "Requirement already satisfied: absl-py>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (1.4.0)\r\n",
      "Requirement already satisfied: astunparse>=1.6.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (1.6.3)\r\n",
      "Requirement already satisfied: flatbuffers>=23.5.26 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (23.5.26)\r\n",
      "Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (0.5.4)\r\n",
      "Requirement already satisfied: google-pasta>=0.1.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (0.2.0)\r\n",
      "Requirement already satisfied: h5py>=2.9.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (3.10.0)\r\n",
      "Requirement already satisfied: libclang>=13.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (16.0.6)\r\n",
      "Requirement already satisfied: ml-dtypes~=0.2.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (0.2.0)\r\n",
      "Requirement already satisfied: numpy<2.0.0,>=1.23.5 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (1.26.4)\r\n",
      "Requirement already satisfied: opt-einsum>=2.3.2 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (3.3.0)\r\n",
      "Requirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (21.3)\r\n",
      "Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (3.20.3)\r\n",
      "Requirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (69.0.3)\r\n",
      "Requirement already satisfied: six>=1.12.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (1.16.0)\r\n",
      "Requirement already satisfied: termcolor>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (2.4.0)\r\n",
      "Requirement already satisfied: typing-extensions>=3.6.6 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (4.9.0)\r\n",
      "Requirement already satisfied: wrapt<1.15,>=1.11.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (1.14.1)\r\n",
      "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (0.35.0)\r\n",
      "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (1.59.3)\r\n",
      "Requirement already satisfied: tensorboard<2.16,>=2.15 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (2.15.1)\r\n",
      "Requirement already satisfied: tensorflow-estimator<2.16,>=2.15.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (2.15.0)\r\n",
      "Collecting keras<2.16,>=2.15.0 (from tensorflow==2.15.0)\r\n",
      "  Downloading keras-2.15.0-py3-none-any.whl.metadata (2.4 kB)\r\n",
      "Requirement already satisfied: wheel<1.0,>=0.23.0 in /opt/conda/lib/python3.10/site-packages (from astunparse>=1.6.0->tensorflow==2.15.0) (0.42.0)\r\n",
      "Requirement already satisfied: google-auth<3,>=1.6.3 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow==2.15.0) (2.26.1)\r\n",
      "Requirement already satisfied: google-auth-oauthlib<2,>=0.5 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow==2.15.0) (1.2.0)\r\n",
      "Requirement already satisfied: markdown>=2.6.8 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow==2.15.0) (3.5.2)\r\n",
      "Requirement already satisfied: requests<3,>=2.21.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow==2.15.0) (2.31.0)\r\n",
      "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow==2.15.0) (0.7.2)\r\n",
      "Requirement already satisfied: werkzeug>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow==2.15.0) (3.0.3)\r\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging->tensorflow==2.15.0) (3.1.1)\r\n",
      "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow==2.15.0) (4.2.4)\r\n",
      "Requirement already satisfied: pyasn1-modules>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow==2.15.0) (0.3.0)\r\n",
      "Requirement already satisfied: rsa<5,>=3.1.4 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow==2.15.0) (4.9)\r\n",
      "Requirement already satisfied: requests-oauthlib>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow==2.15.0) (1.3.1)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow==2.15.0) (3.3.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow==2.15.0) (3.6)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow==2.15.0) (1.26.18)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow==2.15.0) (2024.2.2)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.1.1 in /opt/conda/lib/python3.10/site-packages (from werkzeug>=1.0.1->tensorboard<2.16,>=2.15->tensorflow==2.15.0) (2.1.3)\r\n",
      "Requirement already satisfied: pyasn1<0.6.0,>=0.4.6 in /opt/conda/lib/python3.10/site-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow==2.15.0) (0.5.1)\r\n",
      "Requirement already satisfied: oauthlib>=3.0.0 in /opt/conda/lib/python3.10/site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow==2.15.0) (3.2.2)\r\n",
      "Downloading keras-2.15.0-py3-none-any.whl (1.7 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.7/1.7 MB\u001b[0m \u001b[31m23.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h\u001b[33mWARNING: Error parsing requirements for aiohttp: [Errno 2] No such file or directory: '/opt/conda/lib/python3.10/site-packages/aiohttp-3.9.1.dist-info/METADATA'\u001b[0m\u001b[33m\r\n",
      "\u001b[0mInstalling collected packages: keras\r\n",
      "  Attempting uninstall: keras\r\n",
      "    Found existing installation: keras 3.3.3\r\n",
      "    Uninstalling keras-3.3.3:\r\n",
      "      Successfully uninstalled keras-3.3.3\r\n",
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "tensorflow-decision-forests 1.8.1 requires wurlitzer, which is not installed.\u001b[0m\u001b[31m\r\n",
      "\u001b[0mSuccessfully installed keras-2.15.0\r\n"
     ]
    }
   ],
   "source": [
    "!pip install tensorflow==2.15.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "aaa0cb7d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T11:27:30.819291Z",
     "iopub.status.busy": "2024-06-19T11:27:30.818343Z",
     "iopub.status.idle": "2024-06-19T11:27:45.630510Z",
     "shell.execute_reply": "2024-06-19T11:27:45.629657Z"
    },
    "papermill": {
     "duration": 14.824447,
     "end_time": "2024-06-19T11:27:45.632795",
     "exception": false,
     "start_time": "2024-06-19T11:27:30.808348",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-06-19 11:27:35.688354: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-06-19 11:27:35.688459: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-06-19 11:27:35.826805: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import re\n",
    "import requests\n",
    "from PIL import Image\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import plotly.express as px\n",
    "import plotly.graph_objects as go\n",
    "from plotly.subplots import make_subplots\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import classification_report,confusion_matrix\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras import layers\n",
    "from tensorflow.keras.layers import Conv2D, BatchNormalization, MaxPool2D, Dropout, Flatten, Dense\n",
    "from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\n",
    "from tensorflow.keras.preprocessing import image\n",
    "from tensorflow import keras\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.optimizers import Adam, Adamax\n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
    "\n",
    "from tensorflow.keras import regularizers\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b72b3e86",
   "metadata": {
    "papermill": {
     "duration": 0.007319,
     "end_time": "2024-06-19T11:27:45.647787",
     "exception": false,
     "start_time": "2024-06-19T11:27:45.640468",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Data Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "eb77e399",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T11:27:45.664525Z",
     "iopub.status.busy": "2024-06-19T11:27:45.663432Z",
     "iopub.status.idle": "2024-06-19T11:27:46.667382Z",
     "shell.execute_reply": "2024-06-19T11:27:46.666468Z"
    },
    "papermill": {
     "duration": 1.014334,
     "end_time": "2024-06-19T11:27:46.669428",
     "exception": false,
     "start_time": "2024-06-19T11:27:45.655094",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>filepaths</th>\n",
       "      <th>labels</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>/kaggle/input/capstone-dataset-children-autism...</td>\n",
       "      <td>autistic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>/kaggle/input/capstone-dataset-children-autism...</td>\n",
       "      <td>autistic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>/kaggle/input/capstone-dataset-children-autism...</td>\n",
       "      <td>autistic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>/kaggle/input/capstone-dataset-children-autism...</td>\n",
       "      <td>autistic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>/kaggle/input/capstone-dataset-children-autism...</td>\n",
       "      <td>autistic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2521</th>\n",
       "      <td>/kaggle/input/capstone-dataset-children-autism...</td>\n",
       "      <td>non_autistic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2522</th>\n",
       "      <td>/kaggle/input/capstone-dataset-children-autism...</td>\n",
       "      <td>non_autistic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2523</th>\n",
       "      <td>/kaggle/input/capstone-dataset-children-autism...</td>\n",
       "      <td>non_autistic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2524</th>\n",
       "      <td>/kaggle/input/capstone-dataset-children-autism...</td>\n",
       "      <td>non_autistic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2525</th>\n",
       "      <td>/kaggle/input/capstone-dataset-children-autism...</td>\n",
       "      <td>non_autistic</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2526 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              filepaths        labels\n",
       "0     /kaggle/input/capstone-dataset-children-autism...      autistic\n",
       "1     /kaggle/input/capstone-dataset-children-autism...      autistic\n",
       "2     /kaggle/input/capstone-dataset-children-autism...      autistic\n",
       "3     /kaggle/input/capstone-dataset-children-autism...      autistic\n",
       "4     /kaggle/input/capstone-dataset-children-autism...      autistic\n",
       "...                                                 ...           ...\n",
       "2521  /kaggle/input/capstone-dataset-children-autism...  non_autistic\n",
       "2522  /kaggle/input/capstone-dataset-children-autism...  non_autistic\n",
       "2523  /kaggle/input/capstone-dataset-children-autism...  non_autistic\n",
       "2524  /kaggle/input/capstone-dataset-children-autism...  non_autistic\n",
       "2525  /kaggle/input/capstone-dataset-children-autism...  non_autistic\n",
       "\n",
       "[2526 rows x 2 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Generate data paths with labels\n",
    "train_dir = '/kaggle/input/capstone-dataset-children-autism/Autistic vs Non Autistic/Autistic vs Non Autistic/Train'\n",
    "filepaths = []\n",
    "labels = []\n",
    "\n",
    "# Path to folders\n",
    "folds = os.listdir(train_dir)\n",
    "\n",
    "# join path to folder and then path to each file, fyuhh\n",
    "for fold in folds:\n",
    "    foldpath = os.path.join(train_dir, fold)\n",
    "    filelist = os.listdir(foldpath)\n",
    "    for file in filelist:\n",
    "        fpath = os.path.join(foldpath, file)\n",
    "        \n",
    "        filepaths.append(fpath)\n",
    "        labels.append(fold)\n",
    "\n",
    "# Concatenate data paths with labels into one dataframe\n",
    "Fseries = pd.Series(filepaths, name= 'filepaths')\n",
    "Lseries = pd.Series(labels, name='labels')\n",
    "\n",
    "train_df = pd.concat([Fseries, Lseries], axis= 1)\n",
    "train_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "08c1ece8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T11:27:46.687103Z",
     "iopub.status.busy": "2024-06-19T11:27:46.686493Z",
     "iopub.status.idle": "2024-06-19T11:27:46.787413Z",
     "shell.execute_reply": "2024-06-19T11:27:46.786463Z"
    },
    "papermill": {
     "duration": 0.112394,
     "end_time": "2024-06-19T11:27:46.789729",
     "exception": false,
     "start_time": "2024-06-19T11:27:46.677335",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>filepaths</th>\n",
       "      <th>labels</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>/kaggle/input/capstone-dataset-children-autism...</td>\n",
       "      <td>autistic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>/kaggle/input/capstone-dataset-children-autism...</td>\n",
       "      <td>autistic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>/kaggle/input/capstone-dataset-children-autism...</td>\n",
       "      <td>autistic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>/kaggle/input/capstone-dataset-children-autism...</td>\n",
       "      <td>autistic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>/kaggle/input/capstone-dataset-children-autism...</td>\n",
       "      <td>autistic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>195</th>\n",
       "      <td>/kaggle/input/capstone-dataset-children-autism...</td>\n",
       "      <td>non_autistic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>196</th>\n",
       "      <td>/kaggle/input/capstone-dataset-children-autism...</td>\n",
       "      <td>non_autistic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>197</th>\n",
       "      <td>/kaggle/input/capstone-dataset-children-autism...</td>\n",
       "      <td>non_autistic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>198</th>\n",
       "      <td>/kaggle/input/capstone-dataset-children-autism...</td>\n",
       "      <td>non_autistic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>199</th>\n",
       "      <td>/kaggle/input/capstone-dataset-children-autism...</td>\n",
       "      <td>non_autistic</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>200 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             filepaths        labels\n",
       "0    /kaggle/input/capstone-dataset-children-autism...      autistic\n",
       "1    /kaggle/input/capstone-dataset-children-autism...      autistic\n",
       "2    /kaggle/input/capstone-dataset-children-autism...      autistic\n",
       "3    /kaggle/input/capstone-dataset-children-autism...      autistic\n",
       "4    /kaggle/input/capstone-dataset-children-autism...      autistic\n",
       "..                                                 ...           ...\n",
       "195  /kaggle/input/capstone-dataset-children-autism...  non_autistic\n",
       "196  /kaggle/input/capstone-dataset-children-autism...  non_autistic\n",
       "197  /kaggle/input/capstone-dataset-children-autism...  non_autistic\n",
       "198  /kaggle/input/capstone-dataset-children-autism...  non_autistic\n",
       "199  /kaggle/input/capstone-dataset-children-autism...  non_autistic\n",
       "\n",
       "[200 rows x 2 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Generate data paths with labels\n",
    "val_dir = '/kaggle/input/capstone-dataset-children-autism/Autistic vs Non Autistic/Autistic vs Non Autistic/Valid'\n",
    "filepaths = []\n",
    "labels = []\n",
    "\n",
    "# Path to folders\n",
    "folds = os.listdir(val_dir)\n",
    "\n",
    "# join path to folder and then path to each file, fyuhh\n",
    "for fold in folds:\n",
    "    foldpath = os.path.join(val_dir, fold)\n",
    "    filelist = os.listdir(foldpath)\n",
    "    for file in filelist:\n",
    "        fpath = os.path.join(foldpath, file)\n",
    "        \n",
    "        filepaths.append(fpath)\n",
    "        labels.append(fold)\n",
    "\n",
    "# Concatenate data paths with labels into one dataframe\n",
    "Fseries = pd.Series(filepaths, name= 'filepaths')\n",
    "Lseries = pd.Series(labels, name='labels')\n",
    "\n",
    "val_df = pd.concat([Fseries, Lseries], axis= 1)\n",
    "val_df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "974a7ad2",
   "metadata": {
    "papermill": {
     "duration": 0.008866,
     "end_time": "2024-06-19T11:27:46.807406",
     "exception": false,
     "start_time": "2024-06-19T11:27:46.798540",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Processing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e349d2a9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T11:27:46.825599Z",
     "iopub.status.busy": "2024-06-19T11:27:46.824903Z",
     "iopub.status.idle": "2024-06-19T11:27:47.723483Z",
     "shell.execute_reply": "2024-06-19T11:27:47.722292Z"
    },
    "papermill": {
     "duration": 0.909692,
     "end_time": "2024-06-19T11:27:47.725646",
     "exception": false,
     "start_time": "2024-06-19T11:27:46.815954",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 2526 validated image filenames belonging to 2 classes.\n",
      "Found 200 validated image filenames belonging to 2 classes.\n"
     ]
    }
   ],
   "source": [
    "# resize image\n",
    "batch_size = 50\n",
    "img_size = (224, 224)\n",
    "channels = 3\n",
    "img_shape = (img_size[0], img_size[1], channels)\n",
    "\n",
    "train_gen = ImageDataGenerator(\n",
    "                        rotation_range=40,\n",
    "                        width_shift_range=0.2,\n",
    "                        height_shift_range=0.2,\n",
    "                        rescale=1./255,\n",
    "                        shear_range=0.2,\n",
    "                        zoom_range=0.2,\n",
    "                        horizontal_flip=True,\n",
    "                        fill_mode='nearest')\n",
    "\n",
    "val_gen = ImageDataGenerator(rescale=1.0/255.)\n",
    "\n",
    "train_generator = train_gen.flow_from_dataframe(train_df, x_col= 'filepaths', y_col= 'labels', target_size = img_size, class_mode= 'binary',\n",
    "                                    color_mode= 'rgb', shuffle = True, batch_size = batch_size)\n",
    "\n",
    "val_generator = val_gen.flow_from_dataframe(val_df, x_col= 'filepaths', y_col= 'labels', target_size = img_size, class_mode= 'binary', \n",
    "                                    color_mode= 'rgb', shuffle = False, batch_size = batch_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "deb133d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T11:27:47.743827Z",
     "iopub.status.busy": "2024-06-19T11:27:47.743537Z",
     "iopub.status.idle": "2024-06-19T11:27:47.748607Z",
     "shell.execute_reply": "2024-06-19T11:27:47.747834Z"
    },
    "papermill": {
     "duration": 0.016669,
     "end_time": "2024-06-19T11:27:47.750545",
     "exception": false,
     "start_time": "2024-06-19T11:27:47.733876",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class myCallback(tf.keras.callbacks.Callback):\n",
    "  def on_epoch_end(self, epoch, logs={}):\n",
    "    if(logs.get('val_accuracy')>0.84):\n",
    "      print(\"\\nReached 84% accuracy so cancelling training!\")\n",
    "      self.model.stop_training = True"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd5602bb",
   "metadata": {
    "papermill": {
     "duration": 0.008737,
     "end_time": "2024-06-19T11:27:47.767356",
     "exception": false,
     "start_time": "2024-06-19T11:27:47.758619",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# MobileNetV2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6ca73a8e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T11:27:47.784828Z",
     "iopub.status.busy": "2024-06-19T11:27:47.784088Z",
     "iopub.status.idle": "2024-06-19T11:27:50.398804Z",
     "shell.execute_reply": "2024-06-19T11:27:50.397714Z"
    },
    "papermill": {
     "duration": 2.625604,
     "end_time": "2024-06-19T11:27:50.400782",
     "exception": false,
     "start_time": "2024-06-19T11:27:47.775178",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/mobilenet_v2/mobilenet_v2_weights_tf_dim_ordering_tf_kernels_1.0_224_no_top.h5\n",
      "9406464/9406464 [==============================] - 0s 0us/step\n",
      "last layer output shape:  (None, 7, 7, 1280)\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.applications import MobileNetV2\n",
    "mob_model = MobileNetV2(input_shape=(img_size[0], img_size[1], 3),include_top = False, weights='imagenet')\n",
    "mob_model.trainable = False\n",
    "\n",
    "# last_layer = mob_model.get_layer('block_12_expand')\n",
    "# print('last layer output shape: ', last_layer.output_shape)\n",
    "# last_output = last_layer.output\n",
    "\n",
    "last_output = mob_model.output\n",
    "print('last layer output shape: ', mob_model.output_shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f168d6b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T11:27:50.419802Z",
     "iopub.status.busy": "2024-06-19T11:27:50.418979Z",
     "iopub.status.idle": "2024-06-19T11:27:50.556928Z",
     "shell.execute_reply": "2024-06-19T11:27:50.556169Z"
    },
    "papermill": {
     "duration": 0.149745,
     "end_time": "2024-06-19T11:27:50.559116",
     "exception": false,
     "start_time": "2024-06-19T11:27:50.409371",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout, Conv2D, MaxPooling2D\n",
    "from tensorflow.keras import layers\n",
    "from tensorflow.keras import Model\n",
    "from tensorflow.keras.layers import MaxPooling2D\n",
    "\n",
    "img_size = (224, 224)\n",
    "channels = 3\n",
    "img_shape = (img_size[0], img_size[1], channels)\n",
    "\n",
    "x = mob_model.output\n",
    "# x = Dropout(0.2)(x)\n",
    "x = Conv2D(64, (3,3), activation='relu', padding='same')(x)\n",
    "x = MaxPooling2D((1,1))(x)\n",
    "x = Conv2D(128, (3,3), activation='relu', padding='same')(x)\n",
    "x = MaxPooling2D(1,1)(x)\n",
    "x = Conv2D(128, (3,3), activation='relu', padding='same')(x)\n",
    "x = MaxPooling2D(1,1)(x)\n",
    "x = Conv2D(256, (3,3), activation='relu', padding='same')(x)\n",
    "x = MaxPooling2D(1,1)(x)\n",
    "x = GlobalAveragePooling2D()(x)\n",
    "# x = Dropout(0.3)(x)\n",
    "x = Dense(256, activation='relu')(x)\n",
    "x = Dropout(0.2)(x)\n",
    "x = Dense(1, activation='sigmoid')(x)\n",
    "\n",
    "model = Model(inputs = mob_model.input, outputs = x)\n",
    "model.compile(Adamax(learning_rate= 0.001), loss= 'binary_crossentropy', metrics= ['accuracy'])\n",
    "# model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5d52c27d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T11:27:50.578143Z",
     "iopub.status.busy": "2024-06-19T11:27:50.577549Z",
     "iopub.status.idle": "2024-06-19T12:19:30.519525Z",
     "shell.execute_reply": "2024-06-19T12:19:30.518640Z"
    },
    "papermill": {
     "duration": 3099.953874,
     "end_time": "2024-06-19T12:19:30.521805",
     "exception": false,
     "start_time": "2024-06-19T11:27:50.567931",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1718796480.117639      75 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "50/50 [==============================] - 59s 994ms/step - loss: 0.6351 - accuracy: 0.6536 - val_loss: 0.5994 - val_accuracy: 0.6700\n",
      "Epoch 2/100\n",
      "50/50 [==============================] - 32s 630ms/step - loss: 0.5319 - accuracy: 0.7420 - val_loss: 0.5188 - val_accuracy: 0.7650\n",
      "Epoch 3/100\n",
      "50/50 [==============================] - 31s 614ms/step - loss: 0.4989 - accuracy: 0.7516 - val_loss: 0.5213 - val_accuracy: 0.7650\n",
      "Epoch 4/100\n",
      "50/50 [==============================] - 31s 623ms/step - loss: 0.4957 - accuracy: 0.7632 - val_loss: 0.5057 - val_accuracy: 0.7750\n",
      "Epoch 5/100\n",
      "50/50 [==============================] - 32s 630ms/step - loss: 0.4754 - accuracy: 0.7672 - val_loss: 0.4930 - val_accuracy: 0.7800\n",
      "Epoch 6/100\n",
      "50/50 [==============================] - 31s 623ms/step - loss: 0.4633 - accuracy: 0.7892 - val_loss: 0.5810 - val_accuracy: 0.7550\n",
      "Epoch 7/100\n",
      "50/50 [==============================] - 32s 632ms/step - loss: 0.4443 - accuracy: 0.7912 - val_loss: 0.4885 - val_accuracy: 0.8000\n",
      "Epoch 8/100\n",
      "50/50 [==============================] - 32s 630ms/step - loss: 0.4399 - accuracy: 0.7892 - val_loss: 0.4771 - val_accuracy: 0.8100\n",
      "Epoch 9/100\n",
      "50/50 [==============================] - 31s 622ms/step - loss: 0.4429 - accuracy: 0.7912 - val_loss: 0.5279 - val_accuracy: 0.7650\n",
      "Epoch 10/100\n",
      "50/50 [==============================] - 31s 625ms/step - loss: 0.4305 - accuracy: 0.7996 - val_loss: 0.5112 - val_accuracy: 0.7950\n",
      "Epoch 11/100\n",
      "50/50 [==============================] - 31s 626ms/step - loss: 0.4349 - accuracy: 0.7928 - val_loss: 0.4926 - val_accuracy: 0.7800\n",
      "Epoch 12/100\n",
      "50/50 [==============================] - 31s 625ms/step - loss: 0.4345 - accuracy: 0.7924 - val_loss: 0.5217 - val_accuracy: 0.7550\n",
      "Epoch 13/100\n",
      "50/50 [==============================] - 31s 623ms/step - loss: 0.4151 - accuracy: 0.8096 - val_loss: 0.4704 - val_accuracy: 0.8050\n",
      "Epoch 14/100\n",
      "50/50 [==============================] - 31s 626ms/step - loss: 0.4023 - accuracy: 0.8072 - val_loss: 0.4666 - val_accuracy: 0.7950\n",
      "Epoch 15/100\n",
      "50/50 [==============================] - 31s 629ms/step - loss: 0.4310 - accuracy: 0.8092 - val_loss: 0.4550 - val_accuracy: 0.8000\n",
      "Epoch 16/100\n",
      "50/50 [==============================] - 31s 623ms/step - loss: 0.3906 - accuracy: 0.8180 - val_loss: 0.4582 - val_accuracy: 0.7950\n",
      "Epoch 17/100\n",
      "50/50 [==============================] - 31s 626ms/step - loss: 0.4041 - accuracy: 0.8188 - val_loss: 0.4696 - val_accuracy: 0.7900\n",
      "Epoch 18/100\n",
      "50/50 [==============================] - 31s 617ms/step - loss: 0.3935 - accuracy: 0.8108 - val_loss: 0.4659 - val_accuracy: 0.7850\n",
      "Epoch 19/100\n",
      "50/50 [==============================] - 31s 626ms/step - loss: 0.3910 - accuracy: 0.8148 - val_loss: 0.4660 - val_accuracy: 0.8000\n",
      "Epoch 20/100\n",
      "50/50 [==============================] - 31s 624ms/step - loss: 0.3761 - accuracy: 0.8296 - val_loss: 0.4938 - val_accuracy: 0.7800\n",
      "Epoch 21/100\n",
      "50/50 [==============================] - 31s 611ms/step - loss: 0.3676 - accuracy: 0.8232 - val_loss: 0.4532 - val_accuracy: 0.7850\n",
      "Epoch 22/100\n",
      "50/50 [==============================] - 30s 598ms/step - loss: 0.3944 - accuracy: 0.8152 - val_loss: 0.4750 - val_accuracy: 0.7500\n",
      "Epoch 23/100\n",
      "50/50 [==============================] - 30s 607ms/step - loss: 0.3712 - accuracy: 0.8332 - val_loss: 0.4623 - val_accuracy: 0.7900\n",
      "Epoch 24/100\n",
      "50/50 [==============================] - 30s 606ms/step - loss: 0.3487 - accuracy: 0.8432 - val_loss: 0.4491 - val_accuracy: 0.8000\n",
      "Epoch 25/100\n",
      "50/50 [==============================] - 31s 611ms/step - loss: 0.3658 - accuracy: 0.8296 - val_loss: 0.4463 - val_accuracy: 0.8000\n",
      "Epoch 26/100\n",
      "50/50 [==============================] - 30s 604ms/step - loss: 0.3480 - accuracy: 0.8456 - val_loss: 0.4523 - val_accuracy: 0.7900\n",
      "Epoch 27/100\n",
      "50/50 [==============================] - 30s 607ms/step - loss: 0.3720 - accuracy: 0.8324 - val_loss: 0.4480 - val_accuracy: 0.8000\n",
      "Epoch 28/100\n",
      "50/50 [==============================] - 30s 599ms/step - loss: 0.3474 - accuracy: 0.8480 - val_loss: 0.4966 - val_accuracy: 0.7750\n",
      "Epoch 29/100\n",
      "50/50 [==============================] - 31s 622ms/step - loss: 0.3520 - accuracy: 0.8368 - val_loss: 0.5336 - val_accuracy: 0.7850\n",
      "Epoch 30/100\n",
      "50/50 [==============================] - 30s 593ms/step - loss: 0.3385 - accuracy: 0.8500 - val_loss: 0.4572 - val_accuracy: 0.8050\n",
      "Epoch 31/100\n",
      "50/50 [==============================] - 30s 604ms/step - loss: 0.3447 - accuracy: 0.8444 - val_loss: 0.4380 - val_accuracy: 0.7950\n",
      "Epoch 32/100\n",
      "50/50 [==============================] - 30s 602ms/step - loss: 0.3432 - accuracy: 0.8472 - val_loss: 0.5315 - val_accuracy: 0.7600\n",
      "Epoch 33/100\n",
      "50/50 [==============================] - 30s 604ms/step - loss: 0.3422 - accuracy: 0.8476 - val_loss: 0.4282 - val_accuracy: 0.7950\n",
      "Epoch 34/100\n",
      "50/50 [==============================] - 30s 597ms/step - loss: 0.3262 - accuracy: 0.8504 - val_loss: 0.4205 - val_accuracy: 0.7700\n",
      "Epoch 35/100\n",
      "50/50 [==============================] - 30s 599ms/step - loss: 0.3243 - accuracy: 0.8572 - val_loss: 0.4483 - val_accuracy: 0.7850\n",
      "Epoch 36/100\n",
      "50/50 [==============================] - 30s 604ms/step - loss: 0.3095 - accuracy: 0.8660 - val_loss: 0.4393 - val_accuracy: 0.7900\n",
      "Epoch 37/100\n",
      "50/50 [==============================] - 30s 605ms/step - loss: 0.3172 - accuracy: 0.8592 - val_loss: 0.4495 - val_accuracy: 0.8100\n",
      "Epoch 38/100\n",
      "50/50 [==============================] - 30s 599ms/step - loss: 0.3196 - accuracy: 0.8604 - val_loss: 0.6682 - val_accuracy: 0.7350\n",
      "Epoch 39/100\n",
      "50/50 [==============================] - 31s 611ms/step - loss: 0.3109 - accuracy: 0.8612 - val_loss: 0.4997 - val_accuracy: 0.8350\n",
      "Epoch 40/100\n",
      "50/50 [==============================] - 30s 601ms/step - loss: 0.3237 - accuracy: 0.8576 - val_loss: 0.6192 - val_accuracy: 0.7400\n",
      "Epoch 41/100\n",
      "50/50 [==============================] - 31s 617ms/step - loss: 0.3130 - accuracy: 0.8688 - val_loss: 0.4350 - val_accuracy: 0.7800\n",
      "Epoch 42/100\n",
      "50/50 [==============================] - 30s 604ms/step - loss: 0.2965 - accuracy: 0.8728 - val_loss: 0.7769 - val_accuracy: 0.7700\n",
      "Epoch 43/100\n",
      "50/50 [==============================] - 31s 614ms/step - loss: 0.2974 - accuracy: 0.8664 - val_loss: 0.4568 - val_accuracy: 0.7850\n",
      "Epoch 44/100\n",
      "50/50 [==============================] - 30s 607ms/step - loss: 0.2940 - accuracy: 0.8664 - val_loss: 0.5132 - val_accuracy: 0.8000\n",
      "Epoch 45/100\n",
      "50/50 [==============================] - 31s 620ms/step - loss: 0.2768 - accuracy: 0.8792 - val_loss: 0.6737 - val_accuracy: 0.7650\n",
      "Epoch 46/100\n",
      "50/50 [==============================] - 31s 609ms/step - loss: 0.3156 - accuracy: 0.8548 - val_loss: 0.4671 - val_accuracy: 0.7900\n",
      "Epoch 47/100\n",
      "50/50 [==============================] - 31s 610ms/step - loss: 0.2992 - accuracy: 0.8768 - val_loss: 0.5581 - val_accuracy: 0.8050\n",
      "Epoch 48/100\n",
      "50/50 [==============================] - 30s 606ms/step - loss: 0.2882 - accuracy: 0.8708 - val_loss: 0.6059 - val_accuracy: 0.7850\n",
      "Epoch 49/100\n",
      "50/50 [==============================] - 31s 608ms/step - loss: 0.2893 - accuracy: 0.8748 - val_loss: 0.5564 - val_accuracy: 0.7850\n",
      "Epoch 50/100\n",
      "50/50 [==============================] - 30s 601ms/step - loss: 0.2979 - accuracy: 0.8708 - val_loss: 0.5224 - val_accuracy: 0.7650\n",
      "Epoch 51/100\n",
      "50/50 [==============================] - 30s 602ms/step - loss: 0.2922 - accuracy: 0.8704 - val_loss: 0.4990 - val_accuracy: 0.7750\n",
      "Epoch 52/100\n",
      "50/50 [==============================] - 31s 613ms/step - loss: 0.2895 - accuracy: 0.8780 - val_loss: 0.5306 - val_accuracy: 0.7650\n",
      "Epoch 53/100\n",
      "50/50 [==============================] - 31s 618ms/step - loss: 0.2817 - accuracy: 0.8740 - val_loss: 0.7068 - val_accuracy: 0.8050\n",
      "Epoch 54/100\n",
      "50/50 [==============================] - 30s 602ms/step - loss: 0.2645 - accuracy: 0.8856 - val_loss: 0.4619 - val_accuracy: 0.8150\n",
      "Epoch 55/100\n",
      "50/50 [==============================] - 31s 610ms/step - loss: 0.2692 - accuracy: 0.8784 - val_loss: 0.5293 - val_accuracy: 0.8100\n",
      "Epoch 56/100\n",
      "50/50 [==============================] - 30s 606ms/step - loss: 0.2645 - accuracy: 0.8884 - val_loss: 0.5021 - val_accuracy: 0.8100\n",
      "Epoch 57/100\n",
      "50/50 [==============================] - 31s 611ms/step - loss: 0.2801 - accuracy: 0.8860 - val_loss: 0.4744 - val_accuracy: 0.7950\n",
      "Epoch 58/100\n",
      "50/50 [==============================] - 31s 611ms/step - loss: 0.2706 - accuracy: 0.8896 - val_loss: 0.4243 - val_accuracy: 0.8400\n",
      "Epoch 59/100\n",
      "50/50 [==============================] - 30s 608ms/step - loss: 0.2745 - accuracy: 0.8800 - val_loss: 0.5454 - val_accuracy: 0.7950\n",
      "Epoch 60/100\n",
      "50/50 [==============================] - 31s 611ms/step - loss: 0.2663 - accuracy: 0.8860 - val_loss: 0.4332 - val_accuracy: 0.8150\n",
      "Epoch 61/100\n",
      "50/50 [==============================] - 30s 606ms/step - loss: 0.2485 - accuracy: 0.8944 - val_loss: 0.5130 - val_accuracy: 0.8000\n",
      "Epoch 62/100\n",
      "50/50 [==============================] - 30s 604ms/step - loss: 0.2404 - accuracy: 0.8988 - val_loss: 0.6130 - val_accuracy: 0.8000\n",
      "Epoch 63/100\n",
      "50/50 [==============================] - 31s 615ms/step - loss: 0.2446 - accuracy: 0.8960 - val_loss: 0.5576 - val_accuracy: 0.7900\n",
      "Epoch 64/100\n",
      "50/50 [==============================] - 31s 613ms/step - loss: 0.2485 - accuracy: 0.8896 - val_loss: 0.4782 - val_accuracy: 0.7950\n",
      "Epoch 65/100\n",
      "50/50 [==============================] - 30s 606ms/step - loss: 0.2445 - accuracy: 0.8988 - val_loss: 0.4991 - val_accuracy: 0.8000\n",
      "Epoch 66/100\n",
      "50/50 [==============================] - 31s 615ms/step - loss: 0.2211 - accuracy: 0.9028 - val_loss: 0.5837 - val_accuracy: 0.8050\n",
      "Epoch 67/100\n",
      "50/50 [==============================] - 30s 605ms/step - loss: 0.2505 - accuracy: 0.8964 - val_loss: 0.5926 - val_accuracy: 0.7850\n",
      "Epoch 68/100\n",
      "50/50 [==============================] - 30s 607ms/step - loss: 0.2564 - accuracy: 0.8928 - val_loss: 0.5211 - val_accuracy: 0.8100\n",
      "Epoch 69/100\n",
      "50/50 [==============================] - 30s 606ms/step - loss: 0.2570 - accuracy: 0.8904 - val_loss: 0.4941 - val_accuracy: 0.8050\n",
      "Epoch 70/100\n",
      "50/50 [==============================] - 30s 605ms/step - loss: 0.2316 - accuracy: 0.9012 - val_loss: 0.4798 - val_accuracy: 0.7900\n",
      "Epoch 71/100\n",
      "50/50 [==============================] - 30s 605ms/step - loss: 0.2380 - accuracy: 0.9004 - val_loss: 0.5592 - val_accuracy: 0.8050\n",
      "Epoch 72/100\n",
      "50/50 [==============================] - 30s 604ms/step - loss: 0.2318 - accuracy: 0.9068 - val_loss: 0.6603 - val_accuracy: 0.7900\n",
      "Epoch 73/100\n",
      "50/50 [==============================] - 30s 596ms/step - loss: 0.2252 - accuracy: 0.9060 - val_loss: 0.5746 - val_accuracy: 0.7750\n",
      "Epoch 74/100\n",
      "50/50 [==============================] - 31s 610ms/step - loss: 0.2487 - accuracy: 0.8972 - val_loss: 0.4733 - val_accuracy: 0.8050\n",
      "Epoch 75/100\n",
      "50/50 [==============================] - 30s 604ms/step - loss: 0.2249 - accuracy: 0.9024 - val_loss: 0.5444 - val_accuracy: 0.8000\n",
      "Epoch 76/100\n",
      "50/50 [==============================] - 30s 608ms/step - loss: 0.2436 - accuracy: 0.8960 - val_loss: 0.4723 - val_accuracy: 0.8150\n",
      "Epoch 77/100\n",
      "50/50 [==============================] - 30s 599ms/step - loss: 0.2379 - accuracy: 0.8996 - val_loss: 0.4708 - val_accuracy: 0.8200\n",
      "Epoch 78/100\n",
      "50/50 [==============================] - 30s 604ms/step - loss: 0.2330 - accuracy: 0.9056 - val_loss: 0.5774 - val_accuracy: 0.8050\n",
      "Epoch 79/100\n",
      "50/50 [==============================] - 30s 601ms/step - loss: 0.2178 - accuracy: 0.9012 - val_loss: 0.5173 - val_accuracy: 0.8050\n",
      "Epoch 80/100\n",
      "50/50 [==============================] - 30s 601ms/step - loss: 0.2143 - accuracy: 0.9064 - val_loss: 0.4880 - val_accuracy: 0.8250\n",
      "Epoch 81/100\n",
      "50/50 [==============================] - 30s 599ms/step - loss: 0.2101 - accuracy: 0.9156 - val_loss: 0.6040 - val_accuracy: 0.7600\n",
      "Epoch 82/100\n",
      "50/50 [==============================] - 30s 604ms/step - loss: 0.2346 - accuracy: 0.9048 - val_loss: 0.5802 - val_accuracy: 0.8150\n",
      "Epoch 83/100\n",
      "50/50 [==============================] - 30s 603ms/step - loss: 0.2367 - accuracy: 0.8984 - val_loss: 0.5073 - val_accuracy: 0.8350\n",
      "Epoch 84/100\n",
      "50/50 [==============================] - 31s 622ms/step - loss: 0.2244 - accuracy: 0.9012 - val_loss: 0.5004 - val_accuracy: 0.8050\n",
      "Epoch 85/100\n",
      "50/50 [==============================] - 31s 625ms/step - loss: 0.2081 - accuracy: 0.9196 - val_loss: 0.5356 - val_accuracy: 0.8200\n",
      "Epoch 86/100\n",
      "50/50 [==============================] - 32s 640ms/step - loss: 0.2190 - accuracy: 0.9032 - val_loss: 0.4987 - val_accuracy: 0.8350\n",
      "Epoch 87/100\n",
      "50/50 [==============================] - 31s 617ms/step - loss: 0.2449 - accuracy: 0.8988 - val_loss: 0.5474 - val_accuracy: 0.7800\n",
      "Epoch 88/100\n",
      "50/50 [==============================] - 31s 627ms/step - loss: 0.2343 - accuracy: 0.8976 - val_loss: 0.5246 - val_accuracy: 0.8150\n",
      "Epoch 89/100\n",
      "50/50 [==============================] - 31s 617ms/step - loss: 0.2110 - accuracy: 0.9160 - val_loss: 0.5236 - val_accuracy: 0.8150\n",
      "Epoch 90/100\n",
      "50/50 [==============================] - 31s 625ms/step - loss: 0.2050 - accuracy: 0.9176 - val_loss: 0.5417 - val_accuracy: 0.7900\n",
      "Epoch 91/100\n",
      "50/50 [==============================] - 31s 615ms/step - loss: 0.2383 - accuracy: 0.8960 - val_loss: 0.6488 - val_accuracy: 0.7800\n",
      "Epoch 92/100\n",
      "50/50 [==============================] - 31s 624ms/step - loss: 0.2158 - accuracy: 0.9168 - val_loss: 0.6534 - val_accuracy: 0.8250\n",
      "Epoch 93/100\n",
      "50/50 [==============================] - 31s 614ms/step - loss: 0.2313 - accuracy: 0.8984 - val_loss: 0.5140 - val_accuracy: 0.8000\n",
      "Epoch 94/100\n",
      "50/50 [==============================] - 32s 639ms/step - loss: 0.2147 - accuracy: 0.9132 - val_loss: 0.4983 - val_accuracy: 0.8300\n",
      "Epoch 95/100\n",
      "50/50 [==============================] - 31s 624ms/step - loss: 0.2262 - accuracy: 0.9032 - val_loss: 0.8049 - val_accuracy: 0.7650\n",
      "Epoch 96/100\n",
      "50/50 [==============================] - 32s 637ms/step - loss: 0.2072 - accuracy: 0.9088 - val_loss: 0.5124 - val_accuracy: 0.8300\n",
      "Epoch 97/100\n",
      "50/50 [==============================] - 31s 622ms/step - loss: 0.2232 - accuracy: 0.9024 - val_loss: 0.4842 - val_accuracy: 0.8300\n",
      "Epoch 98/100\n",
      "50/50 [==============================] - 31s 620ms/step - loss: 0.2060 - accuracy: 0.9152 - val_loss: 0.4844 - val_accuracy: 0.8250\n",
      "Epoch 99/100\n",
      "50/50 [==============================] - 31s 624ms/step - loss: 0.1988 - accuracy: 0.9176 - val_loss: 0.5262 - val_accuracy: 0.8300\n",
      "Epoch 100/100\n",
      "50/50 [==============================] - 31s 624ms/step - loss: 0.2087 - accuracy: 0.9168 - val_loss: 0.5078 - val_accuracy: 0.8400\n"
     ]
    }
   ],
   "source": [
    "epochs = 100\n",
    "\n",
    "steps_per_epoch = len(train_df) // batch_size\n",
    "validation_steps = len(val_df) // batch_size\n",
    "\n",
    "callback = myCallback()\n",
    "\n",
    "history = model.fit(x = train_generator, epochs = epochs, steps_per_epoch = steps_per_epoch, verbose = 1, \n",
    "                    validation_data = val_generator, shuffle = False, callbacks = callback)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a156a948",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T12:19:31.439249Z",
     "iopub.status.busy": "2024-06-19T12:19:31.438823Z",
     "iopub.status.idle": "2024-06-19T12:19:31.804908Z",
     "shell.execute_reply": "2024-06-19T12:19:31.804072Z"
    },
    "papermill": {
     "duration": 0.795704,
     "end_time": "2024-06-19T12:19:31.807310",
     "exception": false,
     "start_time": "2024-06-19T12:19:31.011606",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model.save('Model_Autistic.h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c4012352",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T12:19:32.662328Z",
     "iopub.status.busy": "2024-06-19T12:19:32.661915Z",
     "iopub.status.idle": "2024-06-19T12:19:33.305597Z",
     "shell.execute_reply": "2024-06-19T12:19:33.304614Z"
    },
    "papermill": {
     "duration": 1.069554,
     "end_time": "2024-06-19T12:19:33.309339",
     "exception": false,
     "start_time": "2024-06-19T12:19:32.239785",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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p+o+pqpVMVWujDlvXrttbqtWob13z2kbLQyLF6OP8/fCevyyZVGe8wHckposjdXIU8PhtvReeDIlGAwGunbtyvTp01mxYgVvvvkmd+/eZdu2bRQoUMD6IQ9g9erV9O/fHx8fH5o0aUKhQoXw9PREo9GwePFibty4kaQ2hD6bmuho1I1abuDLly/TpEkTQkNDqV+/Pq1atcLX1xetVsu+ffsIDAwkKioqSe2J366cOXPabdNoNOTMmZPbt2/bbfP19bUr0+tjf3VNpqSPzE1sezp27MiiRYuYPn06v//+O7/++isajYb69evzzTffULFiRQCqV6/OunXr+P7771mxYoU1x3XVqlUZM2aMzQKeInlizOojVJx9iSiEEMI5Z2vBRJui8dTbjzIWQqSs573PBNJvcqVd6dFvun37Ntu2baNIkSJ2gahu3bqxfPlyFi5cSPNno6tDni10nFflS6n4ElM3qXLkyGG35pBFnz592LRpEyVKlKBTp07kzJkTvV5PcHAwP//8s83rlti29u3blylTpjB//nyaNWtGZGQky5cvp3DhwjbPshAiHSgK7t99l+jd3JYtw5gW6zspCp4ffYQmLMxapDGZ8BoyhNAqVVDir4EWGYmng1SX0d262aUliz2gBmPz5rjHm0WjvXMH7alTmJ99n+WIWqowsA+OOArEaBMRiNFevqyeSszB+jDW7cWKwd69NmWamzcdBuDMxYo5PKabyqxTiA3EoNVibN3a7l46Yipf3i5dm8ZoRKMysDvmOZ8NAxKISXNbuzme9mY2m4mOjsbNzc1uJE9m0rt3b6ZPn86CBQt48803WbZsGTExMfTs2dPmuiZOnIiHhwe7du2ieLyFpVatWpXk81s+gD948EB1+z2VCO2MGTN48uQJv/zyizUXs8WHH35IYELTIhPRrvv379stpqkoCvfv31ftPKSWpLSnbdu2tG3bltDQUA4dOsTatWtZsGABnTt35vDhw9ZRYC+//DIvv/wyERERHD16lE2bNjF79my6du3KgQMHVNMZiMRzFHCRBaWFECLpnL2HyoxDIdLGi9BnAuk3JdSu9Og3LV68GJPJxNWrVx3OcNm4cSMPHz4ke/bs+Pv7A6gGhuJLTF3L668WQLIESdQ4CsIcP36cTZs20bRpU/744w+bFGVHjhzh559/TnJbITZdXZMmTdi4cSP3799n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",
      "text/plain": [
       "<Figure size 2000x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Define needed variables\n",
    "def f_history(history = history):\n",
    "    tr_acc = history.history['accuracy']\n",
    "    tr_loss = history.history['loss']\n",
    "    val_acc = history.history['val_accuracy']\n",
    "    val_loss = history.history['val_loss']\n",
    "    index_loss = np.argmin(val_loss)\n",
    "    val_lowest = val_loss[index_loss]\n",
    "    index_acc = np.argmax(val_acc)\n",
    "    acc_highest = val_acc[index_acc]\n",
    "    Epochs = [i+1 for i in range(len(tr_acc))]\n",
    "    loss_label = f'best epoch= {str(index_loss + 1)}'\n",
    "    acc_label = f'best epoch= {str(index_acc + 1)}'\n",
    "\n",
    "    # Plot training history\n",
    "    plt.figure(figsize= (20, 8))\n",
    "    plt.style.use('fivethirtyeight')\n",
    "\n",
    "    plt.subplot(1, 2, 1)\n",
    "    plt.plot(Epochs, tr_loss, 'r', label= 'Training loss')\n",
    "    plt.plot(Epochs, val_loss, 'g', label= 'Validation loss')\n",
    "    plt.scatter(index_loss + 1, val_lowest, s= 150, c= 'blue', label= loss_label)\n",
    "    plt.title('Training and Validation Loss')\n",
    "    plt.xlabel('Epochs')\n",
    "    plt.ylabel('Loss')\n",
    "    plt.legend()\n",
    "\n",
    "    plt.subplot(1, 2, 2)\n",
    "    plt.plot(Epochs, tr_acc, 'r', label= 'Training Accuracy')\n",
    "    plt.plot(Epochs, val_acc, 'g', label= 'Validation Accuracy')\n",
    "    plt.scatter(index_acc + 1 , acc_highest, s= 150, c= 'blue', label= acc_label)\n",
    "    plt.title('Training and Validation Accuracy')\n",
    "    plt.xlabel('Epochs')\n",
    "    plt.ylabel('Accuracy')\n",
    "    plt.legend()\n",
    "\n",
    "    plt.tight_layout\n",
    "    plt.show()\n",
    "\n",
    "f_history(history)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "856cc41b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T12:19:34.227539Z",
     "iopub.status.busy": "2024-06-19T12:19:34.226712Z",
     "iopub.status.idle": "2024-06-19T12:19:36.031684Z",
     "shell.execute_reply": "2024-06-19T12:19:36.030627Z"
    },
    "papermill": {
     "duration": 2.297674,
     "end_time": "2024-06-19T12:19:36.033757",
     "exception": false,
     "start_time": "2024-06-19T12:19:33.736083",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4/4 [==============================] - 2s 151ms/step\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "    autistic       0.79      0.92      0.85       100\n",
      "non_autistic       0.90      0.76      0.83       100\n",
      "\n",
      "    accuracy                           0.84       200\n",
      "   macro avg       0.85      0.84      0.84       200\n",
      "weighted avg       0.85      0.84      0.84       200\n",
      "\n"
     ]
    }
   ],
   "source": [
    "preds = model.predict(val_generator)\n",
    "y_pred = (preds > 0.5).astype(int).ravel()  \n",
    "\n",
    "# Classification report\n",
    "g_dict = val_generator.class_indices     \n",
    "classes = list(g_dict.keys())       \n",
    "\n",
    "print(classification_report(val_generator.classes, y_pred, target_names=classes))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "4dd172ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T12:19:36.887754Z",
     "iopub.status.busy": "2024-06-19T12:19:36.886937Z",
     "iopub.status.idle": "2024-06-19T12:19:37.279150Z",
     "shell.execute_reply": "2024-06-19T12:19:37.278095Z"
    },
    "papermill": {
     "duration": 0.821292,
     "end_time": "2024-06-19T12:19:37.281596",
     "exception": false,
     "start_time": "2024-06-19T12:19:36.460304",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x1000 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import itertools\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "g_dict = val_generator.class_indices\n",
    "classes = list(g_dict.keys())\n",
    "\n",
    "# Confusion matrix\n",
    "def f_cm(y_pred):\n",
    "    cm = confusion_matrix(val_generator.classes, y_pred)\n",
    "    \n",
    "    plt.figure(figsize=(10, 10))\n",
    "    plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)\n",
    "    plt.title('Confusion Matrix')\n",
    "    plt.colorbar()\n",
    "    \n",
    "    tick_marks = np.arange(len(classes))\n",
    "    plt.xticks(tick_marks, classes, rotation=45)\n",
    "    plt.yticks(tick_marks, classes)\n",
    "    \n",
    "    thresh = cm.max() / 2.\n",
    "    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n",
    "        plt.text(j, i, cm[i, j], horizontalalignment='center', color='white' if cm[i, j] > thresh else 'black')\n",
    "    \n",
    "    plt.tight_layout()\n",
    "    plt.ylabel('True Label')\n",
    "    plt.xlabel('Predicted Label')\n",
    "    plt.show()\n",
    "\n",
    "f_cm(y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "99cf3999",
   "metadata": {
    "papermill": {
     "duration": 0.420919,
     "end_time": "2024-06-19T12:19:38.126493",
     "exception": false,
     "start_time": "2024-06-19T12:19:37.705574",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "fa78076e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T12:19:38.995499Z",
     "iopub.status.busy": "2024-06-19T12:19:38.995123Z",
     "iopub.status.idle": "2024-06-19T12:19:56.661504Z",
     "shell.execute_reply": "2024-06-19T12:19:56.660344Z"
    },
    "papermill": {
     "duration": 18.093613,
     "end_time": "2024-06-19T12:19:56.664025",
     "exception": false,
     "start_time": "2024-06-19T12:19:38.570412",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting tensorflowjs\r\n",
      "  Downloading tensorflowjs-4.20.0-py3-none-any.whl.metadata (3.2 kB)\r\n",
      "Requirement already satisfied: flax>=0.7.2 in /opt/conda/lib/python3.10/site-packages (from tensorflowjs) (0.8.4)\r\n",
      "Requirement already satisfied: importlib_resources>=5.9.0 in /opt/conda/lib/python3.10/site-packages (from tensorflowjs) (6.1.1)\r\n",
      "Requirement already satisfied: jax>=0.4.13 in /opt/conda/lib/python3.10/site-packages (from tensorflowjs) (0.4.26)\r\n",
      "Requirement already satisfied: jaxlib>=0.4.13 in /opt/conda/lib/python3.10/site-packages (from tensorflowjs) (0.4.26.dev20240504)\r\n",
      "Requirement already satisfied: tensorflow<3,>=2.13.0 in /opt/conda/lib/python3.10/site-packages (from tensorflowjs) (2.15.0)\r\n",
      "Requirement already satisfied: tf-keras>=2.13.0 in /opt/conda/lib/python3.10/site-packages (from tensorflowjs) (2.15.1)\r\n",
      "Requirement already satisfied: tensorflow-decision-forests>=1.5.0 in /opt/conda/lib/python3.10/site-packages (from tensorflowjs) (1.8.1)\r\n",
      "Requirement already satisfied: six<2,>=1.16.0 in /opt/conda/lib/python3.10/site-packages (from tensorflowjs) (1.16.0)\r\n",
      "Requirement already satisfied: tensorflow-hub>=0.16.1 in /opt/conda/lib/python3.10/site-packages (from tensorflowjs) (0.16.1)\r\n",
      "Collecting packaging~=23.1 (from tensorflowjs)\r\n",
      "  Downloading packaging-23.2-py3-none-any.whl.metadata (3.2 kB)\r\n",
      "Requirement already satisfied: numpy>=1.22 in /opt/conda/lib/python3.10/site-packages (from flax>=0.7.2->tensorflowjs) (1.26.4)\r\n",
      "Requirement already satisfied: msgpack in /opt/conda/lib/python3.10/site-packages (from flax>=0.7.2->tensorflowjs) (1.0.7)\r\n",
      "Requirement already satisfied: optax in /opt/conda/lib/python3.10/site-packages (from flax>=0.7.2->tensorflowjs) (0.2.2)\r\n",
      "Requirement already satisfied: orbax-checkpoint in /opt/conda/lib/python3.10/site-packages (from flax>=0.7.2->tensorflowjs) (0.5.14)\r\n",
      "Requirement already satisfied: tensorstore in /opt/conda/lib/python3.10/site-packages (from flax>=0.7.2->tensorflowjs) (0.1.59)\r\n",
      "Requirement already satisfied: rich>=11.1 in /opt/conda/lib/python3.10/site-packages (from flax>=0.7.2->tensorflowjs) (13.7.0)\r\n",
      "Requirement already satisfied: typing-extensions>=4.2 in /opt/conda/lib/python3.10/site-packages (from flax>=0.7.2->tensorflowjs) (4.9.0)\r\n",
      "Requirement already satisfied: PyYAML>=5.4.1 in /opt/conda/lib/python3.10/site-packages (from flax>=0.7.2->tensorflowjs) (6.0.1)\r\n",
      "Requirement already satisfied: ml-dtypes>=0.2.0 in /opt/conda/lib/python3.10/site-packages (from jax>=0.4.13->tensorflowjs) (0.2.0)\r\n",
      "Requirement already satisfied: opt-einsum in /opt/conda/lib/python3.10/site-packages (from jax>=0.4.13->tensorflowjs) (3.3.0)\r\n",
      "Requirement already satisfied: scipy>=1.9 in /opt/conda/lib/python3.10/site-packages (from jax>=0.4.13->tensorflowjs) (1.11.4)\r\n",
      "Requirement already satisfied: absl-py>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow<3,>=2.13.0->tensorflowjs) (1.4.0)\r\n",
      "Requirement already satisfied: astunparse>=1.6.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow<3,>=2.13.0->tensorflowjs) (1.6.3)\r\n",
      "Requirement already satisfied: flatbuffers>=23.5.26 in /opt/conda/lib/python3.10/site-packages (from tensorflow<3,>=2.13.0->tensorflowjs) (23.5.26)\r\n",
      "Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow<3,>=2.13.0->tensorflowjs) (0.5.4)\r\n",
      "Requirement already satisfied: google-pasta>=0.1.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow<3,>=2.13.0->tensorflowjs) (0.2.0)\r\n",
      "Requirement already satisfied: h5py>=2.9.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow<3,>=2.13.0->tensorflowjs) (3.10.0)\r\n",
      "Requirement already satisfied: libclang>=13.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow<3,>=2.13.0->tensorflowjs) (16.0.6)\r\n",
      "Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow<3,>=2.13.0->tensorflowjs) (3.20.3)\r\n",
      "Requirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from tensorflow<3,>=2.13.0->tensorflowjs) (69.0.3)\r\n",
      "Requirement already satisfied: termcolor>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow<3,>=2.13.0->tensorflowjs) (2.4.0)\r\n",
      "Requirement already satisfied: wrapt<1.15,>=1.11.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow<3,>=2.13.0->tensorflowjs) (1.14.1)\r\n",
      "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow<3,>=2.13.0->tensorflowjs) (0.35.0)\r\n",
      "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow<3,>=2.13.0->tensorflowjs) (1.59.3)\r\n",
      "Requirement already satisfied: tensorboard<2.16,>=2.15 in /opt/conda/lib/python3.10/site-packages (from tensorflow<3,>=2.13.0->tensorflowjs) (2.15.1)\r\n",
      "Requirement already satisfied: tensorflow-estimator<2.16,>=2.15.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow<3,>=2.13.0->tensorflowjs) (2.15.0)\r\n",
      "Requirement already satisfied: keras<2.16,>=2.15.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow<3,>=2.13.0->tensorflowjs) (2.15.0)\r\n",
      "Requirement already satisfied: pandas in /opt/conda/lib/python3.10/site-packages (from tensorflow-decision-forests>=1.5.0->tensorflowjs) (2.2.1)\r\n",
      "Requirement already satisfied: wheel in /opt/conda/lib/python3.10/site-packages (from tensorflow-decision-forests>=1.5.0->tensorflowjs) (0.42.0)\r\n",
      "Collecting wurlitzer (from tensorflow-decision-forests>=1.5.0->tensorflowjs)\r\n",
      "  Downloading wurlitzer-3.1.1-py3-none-any.whl.metadata (2.5 kB)\r\n",
      "Requirement already satisfied: markdown-it-py>=2.2.0 in /opt/conda/lib/python3.10/site-packages (from rich>=11.1->flax>=0.7.2->tensorflowjs) (3.0.0)\r\n",
      "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /opt/conda/lib/python3.10/site-packages (from rich>=11.1->flax>=0.7.2->tensorflowjs) (2.17.2)\r\n",
      "Requirement already satisfied: google-auth<3,>=1.6.3 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow<3,>=2.13.0->tensorflowjs) (2.26.1)\r\n",
      "Requirement already satisfied: google-auth-oauthlib<2,>=0.5 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow<3,>=2.13.0->tensorflowjs) (1.2.0)\r\n",
      "Requirement already satisfied: markdown>=2.6.8 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow<3,>=2.13.0->tensorflowjs) (3.5.2)\r\n",
      "Requirement already satisfied: requests<3,>=2.21.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow<3,>=2.13.0->tensorflowjs) (2.31.0)\r\n",
      "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow<3,>=2.13.0->tensorflowjs) (0.7.2)\r\n",
      "Requirement already satisfied: werkzeug>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow<3,>=2.13.0->tensorflowjs) (3.0.3)\r\n",
      "Requirement already satisfied: chex>=0.1.86 in /opt/conda/lib/python3.10/site-packages (from optax->flax>=0.7.2->tensorflowjs) (0.1.86)\r\n",
      "Requirement already satisfied: etils[epath,epy] in /opt/conda/lib/python3.10/site-packages (from orbax-checkpoint->flax>=0.7.2->tensorflowjs) (1.6.0)\r\n",
      "Requirement already satisfied: nest_asyncio in /opt/conda/lib/python3.10/site-packages (from orbax-checkpoint->flax>=0.7.2->tensorflowjs) (1.5.8)\r\n",
      "INFO: pip is looking at multiple versions of tensorstore to determine which version is compatible with other requirements. This could take a while.\r\n",
      "Collecting tensorstore (from flax>=0.7.2->tensorflowjs)\r\n",
      "  Downloading tensorstore-0.1.62-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.0 kB)\r\n",
      "  Downloading tensorstore-0.1.61-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.0 kB)\r\n",
      "  Downloading tensorstore-0.1.60-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.0 kB)\r\n",
      "  Downloading tensorstore-0.1.58-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.0 kB)\r\n",
      "  Downloading tensorstore-0.1.57-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.0 kB)\r\n",
      "  Downloading tensorstore-0.1.56-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.0 kB)\r\n",
      "  Downloading tensorstore-0.1.55-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.0 kB)\r\n",
      "INFO: pip is still looking at multiple versions of tensorstore to determine which version is compatible with other requirements. This could take a while.\r\n",
      "  Downloading tensorstore-0.1.54-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.0 kB)\r\n",
      "  Downloading tensorstore-0.1.53-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.0 kB)\r\n",
      "  Downloading tensorstore-0.1.52-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.0 kB)\r\n",
      "  Downloading tensorstore-0.1.51-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.0 kB)\r\n",
      "Collecting orbax-checkpoint (from flax>=0.7.2->tensorflowjs)\r\n",
      "  Downloading orbax_checkpoint-0.5.17-py3-none-any.whl.metadata (1.8 kB)\r\n",
      "INFO: This is taking longer than usual. You might need to provide the dependency resolver with stricter constraints to reduce runtime. See https://pip.pypa.io/warnings/backtracking for guidance. If you want to abort this run, press Ctrl + C.\r\n",
      "Collecting tensorstore (from flax>=0.7.2->tensorflowjs)\r\n",
      "  Downloading tensorstore-0.1.50-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.0 kB)\r\n",
      "  Downloading tensorstore-0.1.49-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.0 kB)\r\n",
      "  Downloading tensorstore-0.1.48-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.9 kB)\r\n",
      "  Downloading tensorstore-0.1.47-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.9 kB)\r\n",
      "  Downloading tensorstore-0.1.46-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.9 kB)\r\n",
      "  Downloading tensorstore-0.1.45-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.9 kB)\r\n",
      "Collecting orbax-checkpoint (from flax>=0.7.2->tensorflowjs)\r\n",
      "  Downloading orbax_checkpoint-0.5.16-py3-none-any.whl.metadata (1.8 kB)\r\n",
      "  Downloading orbax_checkpoint-0.5.15-py3-none-any.whl.metadata (1.8 kB)\r\n",
      "  Downloading orbax_checkpoint-0.5.14-py3-none-any.whl.metadata (1.8 kB)\r\n",
      "  Downloading orbax_checkpoint-0.5.13-py3-none-any.whl.metadata (1.8 kB)\r\n",
      "  Downloading orbax_checkpoint-0.5.12-py3-none-any.whl.metadata (1.8 kB)\r\n",
      "  Downloading orbax_checkpoint-0.5.11-py3-none-any.whl.metadata (1.8 kB)\r\n",
      "  Downloading orbax_checkpoint-0.5.10-py3-none-any.whl.metadata (1.8 kB)\r\n",
      "  Downloading orbax_checkpoint-0.5.9-py3-none-any.whl.metadata (1.7 kB)\r\n",
      "  Downloading orbax_checkpoint-0.5.8-py3-none-any.whl.metadata (1.7 kB)\r\n",
      "  Downloading orbax_checkpoint-0.5.7-py3-none-any.whl.metadata (1.7 kB)\r\n",
      "  Downloading orbax_checkpoint-0.5.6-py3-none-any.whl.metadata (1.7 kB)\r\n",
      "  Downloading orbax_checkpoint-0.5.5-py3-none-any.whl.metadata (1.7 kB)\r\n",
      "  Downloading orbax_checkpoint-0.5.4-py3-none-any.whl.metadata (1.7 kB)\r\n",
      "  Downloading orbax_checkpoint-0.5.3-py3-none-any.whl.metadata (1.7 kB)\r\n",
      "  Downloading orbax_checkpoint-0.5.2-py3-none-any.whl.metadata (1.7 kB)\r\n",
      "  Downloading orbax_checkpoint-0.5.1-py3-none-any.whl.metadata (1.7 kB)\r\n",
      "  Downloading orbax_checkpoint-0.5.0-py3-none-any.whl.metadata (1.7 kB)\r\n",
      "  Downloading orbax_checkpoint-0.4.8-py3-none-any.whl.metadata (1.7 kB)\r\n",
      "  Downloading orbax_checkpoint-0.4.7-py3-none-any.whl.metadata (1.7 kB)\r\n",
      "  Downloading orbax_checkpoint-0.4.6-py3-none-any.whl.metadata (1.7 kB)\r\n",
      "  Downloading orbax_checkpoint-0.4.5-py3-none-any.whl.metadata (1.7 kB)\r\n",
      "  Downloading orbax_checkpoint-0.4.4-py3-none-any.whl.metadata (1.7 kB)\r\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas->tensorflow-decision-forests>=1.5.0->tensorflowjs) (2.9.0.post0)\r\n",
      "Requirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas->tensorflow-decision-forests>=1.5.0->tensorflowjs) (2023.3.post1)\r\n",
      "Requirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas->tensorflow-decision-forests>=1.5.0->tensorflowjs) (2023.4)\r\n",
      "Requirement already satisfied: toolz>=0.9.0 in /opt/conda/lib/python3.10/site-packages (from chex>=0.1.86->optax->flax>=0.7.2->tensorflowjs) (0.12.1)\r\n",
      "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow<3,>=2.13.0->tensorflowjs) (4.2.4)\r\n",
      "Requirement already satisfied: pyasn1-modules>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow<3,>=2.13.0->tensorflowjs) (0.3.0)\r\n",
      "Requirement already satisfied: rsa<5,>=3.1.4 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow<3,>=2.13.0->tensorflowjs) (4.9)\r\n",
      "Requirement already satisfied: requests-oauthlib>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow<3,>=2.13.0->tensorflowjs) (1.3.1)\r\n",
      "Requirement already satisfied: mdurl~=0.1 in /opt/conda/lib/python3.10/site-packages (from markdown-it-py>=2.2.0->rich>=11.1->flax>=0.7.2->tensorflowjs) (0.1.2)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow<3,>=2.13.0->tensorflowjs) (3.3.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow<3,>=2.13.0->tensorflowjs) (3.6)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow<3,>=2.13.0->tensorflowjs) (1.26.18)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow<3,>=2.13.0->tensorflowjs) (2024.2.2)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.1.1 in /opt/conda/lib/python3.10/site-packages (from werkzeug>=1.0.1->tensorboard<2.16,>=2.15->tensorflow<3,>=2.13.0->tensorflowjs) (2.1.3)\r\n",
      "Requirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from etils[epath,epy]->orbax-checkpoint->flax>=0.7.2->tensorflowjs) (2024.3.1)\r\n",
      "Requirement already satisfied: zipp in /opt/conda/lib/python3.10/site-packages (from etils[epath,epy]->orbax-checkpoint->flax>=0.7.2->tensorflowjs) (3.17.0)\r\n",
      "Requirement already satisfied: pyasn1<0.6.0,>=0.4.6 in /opt/conda/lib/python3.10/site-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow<3,>=2.13.0->tensorflowjs) (0.5.1)\r\n",
      "Requirement already satisfied: oauthlib>=3.0.0 in /opt/conda/lib/python3.10/site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow<3,>=2.13.0->tensorflowjs) (3.2.2)\r\n",
      "Downloading tensorflowjs-4.20.0-py3-none-any.whl (89 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m89.1/89.1 kB\u001b[0m \u001b[31m3.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading packaging-23.2-py3-none-any.whl (53 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m53.0/53.0 kB\u001b[0m \u001b[31m3.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading tensorstore-0.1.45-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (13.5 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.5/13.5 MB\u001b[0m \u001b[31m88.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading orbax_checkpoint-0.4.4-py3-none-any.whl (123 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m124.0/124.0 kB\u001b[0m \u001b[31m7.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading wurlitzer-3.1.1-py3-none-any.whl (8.6 kB)\r\n",
      "\u001b[33mWARNING: Error parsing requirements for aiohttp: [Errno 2] No such file or directory: '/opt/conda/lib/python3.10/site-packages/aiohttp-3.9.1.dist-info/METADATA'\u001b[0m\u001b[33m\r\n",
      "\u001b[0mInstalling collected packages: wurlitzer, tensorstore, packaging, orbax-checkpoint, tensorflowjs\r\n",
      "  Attempting uninstall: tensorstore\r\n",
      "    Found existing installation: tensorstore 0.1.59\r\n",
      "    Uninstalling tensorstore-0.1.59:\r\n",
      "      Successfully uninstalled tensorstore-0.1.59\r\n",
      "  Attempting uninstall: packaging\r\n",
      "    Found existing installation: packaging 21.3\r\n",
      "    Uninstalling packaging-21.3:\r\n",
      "      Successfully uninstalled packaging-21.3\r\n",
      "  Attempting uninstall: orbax-checkpoint\r\n",
      "    Found existing installation: orbax-checkpoint 0.5.14\r\n",
      "    Uninstalling orbax-checkpoint-0.5.14:\r\n",
      "      Successfully uninstalled orbax-checkpoint-0.5.14\r\n",
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "cudf 24.4.1 requires cubinlinker, which is not installed.\r\n",
      "cudf 24.4.1 requires cupy-cuda11x>=12.0.0, which is not installed.\r\n",
      "cudf 24.4.1 requires ptxcompiler, which is not installed.\r\n",
      "cuml 24.4.0 requires cupy-cuda11x>=12.0.0, which is not installed.\r\n",
      "dask-cudf 24.4.1 requires cupy-cuda11x>=12.0.0, which is not installed.\r\n",
      "datasets 2.19.1 requires aiohttp, which is not installed.\r\n",
      "fury 0.10.0 requires aiohttp>=3.8.4, which is not installed.\r\n",
      "jupyter-server-proxy 4.1.0 requires aiohttp, which is not installed.\r\n",
      "keras-cv 0.9.0 requires keras-core, which is not installed.\r\n",
      "keras-nlp 0.12.1 requires keras-core, which is not installed.\r\n",
      "cudf 24.4.1 requires cuda-python<12.0a0,>=11.7.1, but you have cuda-python 12.5.0 which is incompatible.\r\n",
      "distributed 2024.1.1 requires dask==2024.1.1, but you have dask 2024.5.1 which is incompatible.\r\n",
      "google-cloud-bigquery 2.34.4 requires packaging<22.0dev,>=14.3, but you have packaging 23.2 which is incompatible.\r\n",
      "jupyterlab 4.2.1 requires jupyter-lsp>=2.0.0, but you have jupyter-lsp 1.5.1 which is incompatible.\r\n",
      "jupyterlab-lsp 5.1.0 requires jupyter-lsp>=2.0.0, but you have jupyter-lsp 1.5.1 which is incompatible.\r\n",
      "libpysal 4.9.2 requires shapely>=2.0.1, but you have shapely 1.8.5.post1 which is incompatible.\r\n",
      "momepy 0.7.0 requires shapely>=2, but you have shapely 1.8.5.post1 which is incompatible.\r\n",
      "osmnx 1.9.3 requires shapely>=2.0, but you have shapely 1.8.5.post1 which is incompatible.\r\n",
      "rapids-dask-dependency 24.4.1a0 requires dask==2024.1.1, but you have dask 2024.5.1 which is incompatible.\r\n",
      "rapids-dask-dependency 24.4.1a0 requires dask-expr==0.4.0, but you have dask-expr 1.1.1 which is incompatible.\r\n",
      "spopt 0.6.0 requires shapely>=2.0.1, but you have shapely 1.8.5.post1 which is incompatible.\r\n",
      "ydata-profiling 4.6.4 requires numpy<1.26,>=1.16.0, but you have numpy 1.26.4 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[0mSuccessfully installed orbax-checkpoint-0.4.4 packaging-23.2 tensorflowjs-4.20.0 tensorstore-0.1.45 wurlitzer-3.1.1\r\n"
     ]
    }
   ],
   "source": [
    "!pip install tensorflowjs --upgrade"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "8da5007d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-19T12:19:57.596414Z",
     "iopub.status.busy": "2024-06-19T12:19:57.595573Z",
     "iopub.status.idle": "2024-06-19T12:20:05.330403Z",
     "shell.execute_reply": "2024-06-19T12:20:05.329137Z"
    },
    "papermill": {
     "duration": 8.172145,
     "end_time": "2024-06-19T12:20:05.333030",
     "exception": false,
     "start_time": "2024-06-19T12:19:57.160885",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2024-06-19 12:19:59.141661: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\r\n",
      "2024-06-19 12:19:59.141727: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\r\n",
      "2024-06-19 12:19:59.143299: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\r\n"
     ]
    }
   ],
   "source": [
    "!tensorflowjs_converter --input_format keras /kaggle/working/Model_Autistic.h5 /kaggle/working/autism_tfjs_model"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 5132225,
     "sourceId": 8636353,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30716,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3177.02437,
   "end_time": "2024-06-19T12:20:08.011797",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-19T11:27:10.987427",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
